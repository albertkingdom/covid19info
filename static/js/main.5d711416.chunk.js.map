{"version":3,"sources":["components/Cards/Cards.module.scss","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/Map/World.js","components/Map/LeafletMap.js","App.js","index.js"],"names":["module","exports","bk","cardContainer","infoCard","digit","Cards","props","Date","data","lastUpdate","react_default","a","createElement","Container","className","styles","Row","Col","md","country","build_default","start","end","confirmed","value","separator","recovered","deaths","url","fetchData","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url_real","_yield$axios$get","modifiedData","wrap","_context","prev","next","concat","axios","get","sent","console","log","abrupt","t0","stop","_x","apply","this","arguments","fetchDailyData","_ref2","_callee2","_yield$axios$get2","_context2","map","daily","total","date","reportDate","fetchcountries","_ref3","_callee3","_yield$axios$get3","countries","_context3","name","Chart","_useState","useState","_useState2","slicedToArray","dailydata","setDailyData","useEffect","t1","dailyrate","linechart","length","es","labels","item","datasets","label","borderColor","fill","pointBackgroundColor","backgroundColor","barChart","options","legend","display","CountryPicker","changeCountry","fetchCountries","setFetchCountries","fetchAPI","Fragment","class","id","onChange","e","target","selected","index","key","WorldMap","countryStyle","fillColor","fillOpacity","color","dashArray","LeafletMap","location","countrySelect","setClickCountryName","center","lat","long","mapRef","useRef","Map","zoom","style","width","height","margin","ref","TileLayer","attribution","GeoJSON","mapData","onEachFeature","layer","countryName","properties","includes","bindPopup","on","click","event","current","leafletElement","fitBounds","getBounds","feature","mouseleave","resetStyle","Marker","position","App","setData","_useState3","_useState4","isloading","setIsloading","_useState5","_useState6","setCountry","_useState7","_useState8","setLocation","_useState9","_useState10","allCountryData","setAllCountryData","_useState11","_useState12","globalData","setGlobalData","_getGlobalData","fetcheddata","getGlobalData","fetch","then","res","json","href","CountryPicker_CountryPicker","filteredCountryData","filter","cases","updated","countryInfo","handleIfSelectCountry","Cards_Cards","Chart_Chart","Map_LeafletMap","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5d711416.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bk\":\"Cards_bk__2kkGv\",\"cardContainer\":\"Cards_cardContainer__3-LiF\",\"infoCard\":\"Cards_infoCard__3zPOm\",\"digit\":\"Cards_digit__3WPul\"};","import React from \"react\";\r\n// import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.scss\";\r\n// import \"./Cards.scss\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport CountUp from \"react-countup\";\r\nconst Cards = (props) => {\r\n  // console.log(\"cards props\", props);\r\n\r\n  const date = new Date(props.data.lastUpdate); //更新時間\r\n  const display = (\r\n    <Container className={styles.cardContainer}>\r\n      <Row>\r\n        <Col md={4}>\r\n          <div className={styles.infoCard}>\r\n            <h5 className=\"\">\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              確診人數\r\n            </h5>\r\n            <div className={styles.digit}>\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.confirmed.value}\r\n                separator=\",\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col md={4}>\r\n          <div className={styles.infoCard}>\r\n            <h5 className=\"\">\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              復原人數\r\n            </h5>\r\n            <div className={styles.digit}>\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.recovered.value}\r\n                separator=\",\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col md={4}>\r\n          <div className={styles.infoCard}>\r\n            <h5 className=\"\">\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              死亡人數\r\n            </h5>\r\n            <div className={styles.digit}>\r\n              <CountUp start={0} end={props.data.deaths.value} separator=\",\" />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n  return display;\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  try {\r\n    // const response = await axios.get(url);\r\n    let url_real = url; //如果有選country則改變url\r\n    // console.log(\"fetchdata country\", country);\r\n\r\n    if (country && country !== \"Global\") {\r\n      url_real = `${url}/countries/${country}`;\r\n    }\r\n    const { data } = await axios.get(url_real);\r\n    // const data = response.json();\r\n\r\n    const modifiedData = {\r\n      confirmed: data.confirmed,\r\n      recovered: data.recovered,\r\n      deaths: data.deaths,\r\n      lastUpdate: data.lastUpdate,\r\n    };\r\n    console.log(\"fetchData\", modifiedData);\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    // const response = await axios.get(url);\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    // console.log(\"data_daily\", data);\r\n\r\n    const modifiedData = data.map((daily) => ({\r\n      confirmed: daily.confirmed.total,\r\n      deaths: daily.deaths.total,\r\n      recovered: daily.recovered.total,\r\n      date: daily.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchcountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    // console.log(countries);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailydata, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const dailyrate = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    // console.log(dailydata);\r\n    dailyrate();\r\n  }, []);\r\n\r\n  const linechart =\r\n    dailydata.length !== 0 ? (\r\n      <Line\r\n        data={{\r\n          labels: dailydata.map((item) => item.date),\r\n          datasets: [\r\n            {\r\n              data: dailydata.map((item) => item.confirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"grey\",\r\n              fill: true,\r\n              pointBackgroundColor: \"grey\",\r\n            },\r\n            {\r\n              data: dailydata.map((item) => item.deaths),\r\n              label: \"death\",\r\n              borderColor: \"red\",\r\n              fill: true,\r\n              pointBackgroundColor: \"red\",\r\n              backgroundColor: \"#fc7272\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        // title: { display: true, text: `Current state in ${country}` }\r\n      }}\r\n    />\r\n  ) : null;\r\n  return <Container>{country !== \"Global\" ? barChart : linechart}</Container>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\n// import { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\r\nimport { fetchcountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ changeCountry }) => {\r\n  // console.log(changeCountry);\r\n  const [fetchCountries, setFetchCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchCountries(await fetchcountries());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <form>\r\n        <div class=\"form-row justify-content-center my-4\">\r\n          {/* <label for=\"\">123</label> */}\r\n          <div className=\"col-10 col-lg-2\">\r\n            <select\r\n              class=\"form-control\"\r\n              name=\"\"\r\n              id=\"\"\r\n              onChange={(e) => changeCountry(e.target.value)}\r\n            >\r\n              <option selected>Global</option>\r\n              {fetchCountries.map((country, index) => (\r\n                <option key={index} value={country}>\r\n                  {country}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { geoMercator, geoPath, geoGraticule10, geoEqualEarth } from \"d3-geo\";\r\nimport $ from \"jquery\";\r\n\r\nfunction WorldMap({ country }) {\r\n  const [worlddata, setWorlddata] = useState([]);\r\n  const [lastcountry, setLastCountry] = useState({ name: \"123\", color: \"123\" });\r\n\r\n  console.log(\"map country\", country);\r\n  const projection = geoEqualEarth()\r\n    .scale(160)\r\n    .translate([800 / 2, 450 / 2]);\r\n  useEffect(() => {\r\n    fetch(\"map/ne_110m_admin_0_countries_geojson.json\")\r\n      // fetch(\"./map/test.json\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        // console.log(\"world\", data);\r\n        setWorlddata(data.features);\r\n        // draw(data);\r\n      });\r\n    const map = d3\r\n      .select(\"#map\")\r\n      .attr(\"width\", 500)\r\n      .attr(\"height\", 500);\r\n    function draw(mapData) {\r\n      // 設定投影中心點與縮放倍率\r\n      const projection = d3.geoMercator().translate([1000 / 2, 1000 / 2]);\r\n\r\n      // 將投影資料轉換為路徑\r\n      const path = d3.geoPath().projection(projection);\r\n\r\n      // 繪製地圖\r\n      map\r\n        .selectAll(\"path\")\r\n        .data(mapData.objects.ne_110m_land.geometries)\r\n        .enter()\r\n        .append(\"path\")\r\n        .attr(\"d\", path)\r\n        .attr(\"stroke\", \"black\")\r\n        .attr(\"stroke-width\", \"0.7\")\r\n        .attr(\"fill\", \"steelblue\")\r\n        .on(\"mouseover\", function() {\r\n          d3.select(this).attr(\"fill\", \"#007bff\");\r\n        })\r\n        // 滑鼠碰到後改變顏色\r\n        .on(\"mouseleave\", function() {\r\n          d3.select(this).attr(\"fill\", \"steelblue\");\r\n        });\r\n      // 滑鼠離開將顏色變回\r\n    }\r\n  }, []);\r\n  //ADD function to svg\r\n  // const handleCountryEnter = index => {\r\n  //   // console.log('hover on',worlddata[index].properties.NAME);\r\n  //   $(\"#countryname\").text(\"目前國家: \" + worlddata[index].properties.NAME);\r\n  //   // $('path').attr('fill','red')\r\n  // };\r\n  let lastpath; //save last target\r\n  let lastpathcolor; //save last target color\r\n  const handleClick = e => {\r\n    // console.log(e.target);\r\n    $(lastpath).attr(\"fill\", lastpathcolor);\r\n    lastpathcolor = $(e.target).attr(\"fill\");\r\n    lastpath = e.target;\r\n    console.log(\"lastpath\", lastpath);\r\n    console.log(\"lastpathcolor\", lastpathcolor);\r\n    // $('g.countries').find('path').attr('fill','red')\r\n    // $(\"path[fill='red']\").attr('fill',lastpathcolor)\r\n\r\n    $(e.target).attr(\"fill\", \"red\");\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"props\", country);\r\n    //將上一個選擇的country設定回預設\r\n    console.log(\"lastcountry prop\", lastcountry.name);\r\n    $(`path[data-countryname=${lastcountry.name}]`).attr(\r\n      \"fill\",\r\n      lastcountry.color\r\n    );\r\n    let lastcountryproperty = {\r\n      name: country,\r\n      color: $(`path[data-countryname=${country}]`).attr(\"fill\")\r\n    };\r\n    setLastCountry(lastcountryproperty);\r\n    // console.log('last country',lastcountryselect)\r\n    $(`path[data-countryname=${country}]`).attr(\"fill\", \"blue\");\r\n  }, [country]);\r\n  return (\r\n    <>\r\n      <h5 className=\"my-3\" id=\"countryname\">\r\n        {/* 目前國家: */}\r\n      </h5>\r\n      <p style={{ color: \"blue\" }}>選取不同國家在地圖上會變藍色</p>\r\n      <div id=\"map\">\r\n        <svg\r\n          style={{ border: \"1px solid gray\" }}\r\n          width=\"1000\"\r\n          height=\"550\"\r\n          viewBox=\"0 0 800 450\"\r\n        >\r\n          <g className=\"countries\">\r\n            {worlddata.map((d, i) => (\r\n              <path\r\n                key={`path-${i}`}\r\n                d={geoPath().projection(projection)(d)}\r\n                className=\"country\"\r\n                fill={`rgba(38,50,56,${(1 / worlddata.length) * i})`}\r\n                stroke=\"#FFFFFF\"\r\n                strokeWidth={0.5}\r\n                // onMouseEnter={() => handleCountryEnter(i)}\r\n                // onClick={e => handleClick(e)}\r\n                data-countryname={d.properties.NAME}\r\n              />\r\n            ))}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Map, TileLayer, GeoJSON, Marker } from \"react-leaflet\";\r\nimport mapData from \"./custom.geo.json\";\r\n\r\n//color:邊線顏色,dashArray:邊線的虛線類型\r\nconst countryStyle = {\r\n  fillColor: \"red\",\r\n  fillOpacity: 0.3,\r\n  color: \"white\",\r\n  dashArray: \"3\",\r\n};\r\n\r\nconst LeafletMap = ({ location, countrySelect }) => {\r\n  const [clickCountryName, setClickCountryName] = useState(\"\");\r\n  //   let center = [37.8, -96];\r\n  let center = location ? [location.lat, location.long] : [37.8, -96]; //設置地圖中心點座標\r\n\r\n  const mapRef = useRef(null);\r\n  const onEachCountry = (country, layer, countrySelect) => {\r\n    const countryName = country.properties.name;\r\n    console.log(\"countryName includes?\", countryName.includes(countrySelect));\r\n\r\n    layer.bindPopup(countryName); //觸發顯示國家名\r\n\r\n    // layer.options.fillColor = \"green\";\r\n\r\n    // layer.options.fillColor = countryName.includes(countrySelect)\r\n    //   ? \"red\"\r\n    //   : \"green\"; //改背景顏色\r\n\r\n    layer.on({\r\n      click: (event) => {\r\n        console.log(\"click\", event.target);\r\n\r\n        const map = mapRef.current.leafletElement;\r\n        // console.log(mapRef);\r\n        map.fitBounds(event.target.getBounds()); //將click到的地區擺到正中央\r\n\r\n        setClickCountryName(event.target.feature.properties.name);\r\n      },\r\n      mouseleave: (event) => {\r\n        event.target.resetStyle(); //no effect?\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Map\r\n        center={center}\r\n        zoom={3}\r\n        style={{ width: \"50vw\", height: \"500px\", margin: \"50px auto\" }}\r\n        ref={mapRef}\r\n      >\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <GeoJSON\r\n          style={countryStyle}\r\n          data={mapData}\r\n          onEachFeature={onEachCountry}\r\n        />\r\n        <Marker position={center} />\r\n      </Map>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LeafletMap;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport { fetchData } from \"./api\";\r\nimport LeafletMap from \"./components/Map/LeafletMap\";\r\nexport default function App() {\r\n  const [data, setData] = useState({}); //傳給子元件的資料\r\n  const [isloading, setIsloading] = useState(true);\r\n  const [country, setCountry] = useState();\r\n  const [location, setLocation] = useState(null); //經緯度\r\n  const [allCountryData, setAllCountryData] = useState(); //存所有國家資料\r\n  const [globalData, setGlobalData] = useState(); //存全球資料\r\n  async function getGlobalData() {\r\n    const fetcheddata = await fetchData();\r\n\r\n    setGlobalData(fetcheddata);\r\n    setData(fetcheddata);\r\n    setIsloading(false);\r\n  }\r\n  const fetchAllCountryData = () => {\r\n    //所有國家資料\r\n    let url = \"https://corona.lmao.ninja/v2/countries?yesterday=false&sort\";\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        // console.log(\"all country\", data);\r\n\r\n        setAllCountryData(data);\r\n      });\r\n  };\r\n  const handleIfSelectCountry = (country) => {\r\n    const filteredCountryData = allCountryData.filter(\r\n      (item) => item.country === country || item.country.includes(country)\r\n    );\r\n    setData({\r\n      confirmed: { value: filteredCountryData[0].cases },\r\n      recovered: { value: filteredCountryData[0].recovered },\r\n      deaths: { value: filteredCountryData[0].deaths },\r\n      lastUpdate: filteredCountryData[0].updated,\r\n    });\r\n    setLocation({\r\n      lat: filteredCountryData[0].countryInfo.lat,\r\n      long: filteredCountryData[0].countryInfo.long,\r\n    });\r\n  };\r\n  const handleIfSelectGlobal = () => {\r\n    setData(globalData);\r\n    setLocation(null);\r\n  };\r\n  useEffect(() => {\r\n    setCountry(\"Global\");\r\n    getGlobalData();\r\n    fetchAllCountryData();\r\n  }, []);\r\n\r\n  //處理country選擇\r\n  const handleCountryChange = (country) => {\r\n    setCountry(country);\r\n    country === \"Global\"\r\n      ? handleIfSelectGlobal()\r\n      : handleIfSelectCountry(country);\r\n  };\r\n  return (\r\n    <div className=\"App appCustom\">\r\n      <div className=\"appBackground\" />\r\n      <h2 className=\"text-uppercase mb-4 py-4 text-white\">\r\n        Covid19 live info demo\r\n      </h2>\r\n      <h6 className=\"text-white\">\r\n        The COVID-19 API is from<span> </span>\r\n        <a className=\"text-white\" href=\"https://covid19.mathdro.id/api\">\r\n          https://covid19.mathdro.id/api\r\n        </a>\r\n      </h6>\r\n      <CountryPicker changeCountry={handleCountryChange} />\r\n      {isloading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <Cards data={data} country={country} />\r\n      )}\r\n\r\n      <Chart data={data} country={country} />\r\n      {/* <World country={country} /> */}\r\n\r\n      <LeafletMap countrySelect={country} location={location} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}