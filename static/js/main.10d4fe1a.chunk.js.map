{"version":3,"sources":["components/Cards/Cards.module.scss","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/Map/World.js","App.js","index.js"],"names":["module","exports","bk","cardContainer","Cards","props","console","log","date","Date","data","lastUpdate","react_default","a","createElement","Container","className","styles","Row","Col","md","Card","Header","country","Body","Text","build_default","start","end","confirmed","value","separator","Footer","toLocaleString","recovered","deaths","url","fetchData","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url_real","_yield$axios$get","modifiedData","wrap","_context","prev","next","concat","axios","get","sent","abrupt","t0","stop","_x","apply","this","arguments","fetchDailyData","_ref2","_callee2","_yield$axios$get2","_context2","map","daily","total","reportDate","fetchcountries","_ref3","_callee3","_yield$axios$get3","countries","_context3","name","Chart","_useState","useState","_useState2","slicedToArray","dailydata","setDailyData","useEffect","t1","dailyrate","linechart","length","es","labels","item","datasets","label","borderColor","fill","pointBackgroundColor","backgroundColor","barChart","options","legend","display","CountryPicker","changeCountry","fetchCountries","setFetchCountries","fetchAPI","Fragment","FormControl","style","margin","InputLabel","htmlFor","NativeSelect","onChange","e","target","replace","index","key","WorldMap","worlddata","setWorlddata","_useState3","color","_useState4","lastcountry","setLastCountry","projection","geoEqualEarth","scale","translate","fetch","then","res","json","features","d3","attr","$","lastcountryproperty","id","border","width","height","viewBox","d","i","geoPath","stroke","strokeWidth","data-countryname","properties","NAME","App","setData","isloading","setIsloading","_useState5","_useState6","setCountry","_getdata","fetcheddata","getdata","handleCountryChange","href","Cards_Cards","CountryPicker_CountryPicker","Chart_Chart","World","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.10d4fe1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bk\":\"Cards_bk__3EfmG\",\"cardContainer\":\"Cards_cardContainer__3SvqF\"};","import React from \"react\";\r\n// import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.scss\";\r\n// import \"./Cards.scss\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport CountUp from \"react-countup\";\r\nconst Cards = props => {\r\n  console.log(\"cards props\", props);\r\n  // const { confirmed, recovered } = data;\r\n  // console.log(\"data.confirmed\", data.confirmed);\r\n  // console.log(recovered);\r\n  const date = new Date(props.data.lastUpdate);\r\n  const display = (\r\n    <Container className={styles.cardContainer}>\r\n      <Row>\r\n        {/* <div className={styles.bk}>{data.confirmed.value}</div> */}\r\n        {/* {data.map((item,index)=>item.value)} */}\r\n        {/* <div className={styles.bk}>{recovered.value}</div> */}\r\n        <Col md={4}>\r\n          <Card className=\"text-center my-2\">\r\n            <Card.Header>\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              確診人數\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.confirmed.value}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"text-muted\">\r\n              更新時間:{date.toLocaleString()}\r\n            </Card.Footer>\r\n          </Card>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className=\"text-center my-2\">\r\n            <Card.Header>\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              復原人數\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.recovered.value}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"text-muted\">\r\n              更新時間:{date.toLocaleString()}\r\n            </Card.Footer>\r\n          </Card>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className=\"text-center my-2\">\r\n            <Card.Header>\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              死亡人數\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.deaths.value}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"text-muted\">\r\n              更新時間:{date.toLocaleString()}\r\n            </Card.Footer>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n  return display;\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async country => {\r\n  try {\r\n    // const response = await axios.get(url);\r\n    let url_real = url; //如果有選country則改變url\r\n    console.log(\"fetchdata country\", country);\r\n\r\n    if (country && country !== \"Global\") {\r\n      url_real = `${url}/countries/${country}`;\r\n    }\r\n    const { data } = await axios.get(url_real);\r\n    // const data = response.json();\r\n\r\n    const modifiedData = {\r\n      confirmed: data.confirmed,\r\n      recovered: data.recovered,\r\n      deaths: data.deaths,\r\n      lastUpdate: data.lastUpdate\r\n    };\r\n    console.log(\"fetchData\", modifiedData);\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    // const response = await axios.get(url);\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    console.log(\"data_daily\", data);\r\n\r\n    const modifiedData = data.map(daily => ({\r\n      confirmed: daily.confirmed.total,\r\n      deaths: daily.deaths.total,\r\n      date: daily.reportDate\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchcountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries }\r\n    } = await axios.get(`${url}/countries`);\r\n    console.log(countries);\r\n    return countries.map(country => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailydata, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const dailyrate = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    // console.log(dailydata);\r\n    dailyrate();\r\n  }, []);\r\n\r\n  const linechart =\r\n    dailydata.length !== 0 ? (\r\n      <Line\r\n        data={{\r\n          labels: dailydata.map(item => item.date),\r\n          datasets: [\r\n            {\r\n              data: dailydata.map(item => item.confirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"grey\",\r\n              fill: true,\r\n              pointBackgroundColor: \"grey\"\r\n            },\r\n            {\r\n              data: dailydata.map(item => item.deaths),\r\n              label: \"death\",\r\n              borderColor: \"red\",\r\n              fill: true,\r\n              pointBackgroundColor: \"red\",\r\n              backgroundColor: \"#fc7272\"\r\n            }\r\n          ]\r\n        }}\r\n      />\r\n    ) : null;\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\"\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value]\r\n          }\r\n        ]\r\n      }}\r\n      options={{\r\n        legend: { display: false }\r\n        // title: { display: true, text: `Current state in ${country}` }\r\n      }}\r\n    />\r\n  ) : null;\r\n  return <Container>{country !== \"Global\" ? barChart : linechart}</Container>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\r\nimport { fetchcountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ changeCountry }) => {\r\n  console.log(changeCountry);\r\n  const [fetchCountries, setFetchCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchCountries(await fetchcountries());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <FormControl style={{ margin: \"250px 0 10px\" }}>\r\n        <InputLabel htmlFor=\"my-input\">Select the country</InputLabel>\r\n        <NativeSelect\r\n          onChange={e => {\r\n            changeCountry(e.target.value.replace(\"*\",\"\"));\r\n            console.log(\"country selected is\", e.target.value);\r\n          }}\r\n        >\r\n          <>\r\n            {fetchCountries.map((country, index) => (\r\n              <option key={index} value={country}>\r\n                {country}\r\n              </option>\r\n            ))}\r\n            <option>Global</option>\r\n          </>\r\n        </NativeSelect>\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { geoMercator, geoPath, geoGraticule10, geoEqualEarth } from \"d3-geo\";\nimport $ from \"jquery\";\n\nfunction WorldMap({ country }) {\n  const [worlddata, setWorlddata] = useState([]);\n  const [lastcountry, setLastCountry] = useState({ name: \"123\", color: \"123\" });\n\n  console.log(\"map country\", country);\n  const projection = geoEqualEarth()\n    .scale(160)\n    .translate([800 / 2, 450 / 2]);\n  useEffect(() => {\n    fetch(\"map/ne_110m_admin_0_countries_geojson.json\")\n      // fetch(\"./map/test.json\")\n      .then(res => res.json())\n      .then(data => {\n        // console.log(\"world\", data);\n        setWorlddata(data.features);\n        // draw(data);\n      });\n    const map = d3\n      .select(\"#map\")\n      .attr(\"width\", 500)\n      .attr(\"height\", 500);\n    function draw(mapData) {\n      // 設定投影中心點與縮放倍率\n      const projection = d3.geoMercator().translate([1000 / 2, 1000 / 2]);\n\n      // 將投影資料轉換為路徑\n      const path = d3.geoPath().projection(projection);\n\n      // 繪製地圖\n      map\n        .selectAll(\"path\")\n        .data(mapData.objects.ne_110m_land.geometries)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", path)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"0.7\")\n        .attr(\"fill\", \"steelblue\")\n        .on(\"mouseover\", function() {\n          d3.select(this).attr(\"fill\", \"#007bff\");\n        })\n        // 滑鼠碰到後改變顏色\n        .on(\"mouseleave\", function() {\n          d3.select(this).attr(\"fill\", \"steelblue\");\n        });\n      // 滑鼠離開將顏色變回\n    }\n  }, []);\n  //ADD function to svg\n  // const handleCountryEnter = index => {\n  //   // console.log('hover on',worlddata[index].properties.NAME);\n  //   $(\"#countryname\").text(\"目前國家: \" + worlddata[index].properties.NAME);\n  //   // $('path').attr('fill','red')\n  // };\n  let lastpath; //save last target\n  let lastpathcolor; //save last target color\n  const handleClick = e => {\n    // console.log(e.target);\n    $(lastpath).attr(\"fill\", lastpathcolor);\n    lastpathcolor = $(e.target).attr(\"fill\");\n    lastpath = e.target;\n    console.log(\"lastpath\", lastpath);\n    console.log(\"lastpathcolor\", lastpathcolor);\n    // $('g.countries').find('path').attr('fill','red')\n    // $(\"path[fill='red']\").attr('fill',lastpathcolor)\n\n    $(e.target).attr(\"fill\", \"red\");\n  };\n  useEffect(() => {\n    console.log(\"props\", country);\n    //將上一個選擇的country設定回預設\n    console.log(\"lastcountry prop\", lastcountry.name);\n    $(`path[data-countryname=${lastcountry.name}]`).attr(\n      \"fill\",\n      lastcountry.color\n    );\n    let lastcountryproperty = {\n      name: country,\n      color: $(`path[data-countryname=${country}]`).attr(\"fill\")\n    };\n    setLastCountry(lastcountryproperty);\n    // console.log('last country',lastcountryselect)\n    $(`path[data-countryname=${country}]`).attr(\"fill\", \"blue\");\n  }, [country]);\n  return (\n    <>\n      <h5 className=\"my-3\" id=\"countryname\">\n        {/* 目前國家: */}\n      </h5>\n      <p style={{ color: \"blue\" }}>選取不同國家在地圖上會變藍色</p>\n      <div id=\"map\">\n        <svg\n          style={{ border: \"1px solid gray\" }}\n          width=\"1000\"\n          height=\"550\"\n          viewBox=\"0 0 800 450\"\n        >\n          <g className=\"countries\">\n            {worlddata.map((d, i) => (\n              <path\n                key={`path-${i}`}\n                d={geoPath().projection(projection)(d)}\n                className=\"country\"\n                fill={`rgba(38,50,56,${(1 / worlddata.length) * i})`}\n                stroke=\"#FFFFFF\"\n                strokeWidth={0.5}\n                // onMouseEnter={() => handleCountryEnter(i)}\n                // onClick={e => handleClick(e)}\n                data-countryname={d.properties.NAME}\n              />\n            ))}\n          </g>\n        </svg>\n      </div>\n    </>\n  );\n}\n\nexport default WorldMap;\n","import React, { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\nimport { Cards, Chart, CountryPicker, World } from \"./components\";\nimport { fetchData } from \"./api\";\nexport default function App() {\n  const [data, setData] = useState({});\n  const [isloading, setIsloading] = useState(true);\n  const [country, setCountry] = useState();\n\n  useEffect(() => {\n    // const data = fetchData();\n    async function getdata() {\n      const fetcheddata = await fetchData();\n      console.log(\"fetcheddata\", fetcheddata);\n      setData(fetcheddata);\n      setIsloading(false);\n      // return data;\n      // console.log(\"app.js\", data);\n    }\n\n    getdata();\n    console.log(\"data_out\", data);\n  }, []);\n  // console.log(\"app.js\", data);\n  //處理country選擇\n  const handleCountryChange = async country => {\n    console.log(\"handlecountrychange\", country);\n    const fetcheddata = await fetchData(country);\n    // console.log(fetcheddata);\n    setData(fetcheddata);\n    setCountry(country);\n  };\n  return (\n    <div className=\"App appCustom\">\n      <h2 className=\"text-uppercase my-4 text-white\">Covid19 live info demo</h2>\n      <h6 className=\"text-white\">\n        The COVID-19 API is from\n        <a className=\"text-white\" href=\"https://covid19.mathdro.id/api\">\n          {\" \"}\n          https://covid19.mathdro.id/api\n        </a>\n      </h6>\n      {isloading ? (\n        <div>Loading...</div>\n      ) : (\n        <Cards data={data} country={country} />\n      )}\n      <CountryPicker changeCountry={handleCountryChange} />\n      <Chart data={data} country={country} />\n      <World country={country} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}