{"version":3,"sources":["components/Cards/Cards.module.scss","components/Cards/Cards.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/Map/World.js","api/index.js","components/Map/LeafletMap.js","App.js","index.js"],"names":["module","exports","bk","cardContainer","infoCard","digit","Cards","props","Date","data","lastUpdate","react_default","a","createElement","Container","className","styles","Row","Col","md","data-test","country","build_default","start","end","confirmed","value","separator","recovered","deaths","Chart","historyData","linechart","es","labels","Object","keys","datasets","values","label","borderColor","fill","pointBackgroundColor","backgroundColor","height","width","barChart","options","legend","display","CountryPicker","changeCountry","countryNames","Fragment","name","id","onChange","e","target","defaultValue","map","index","key","WorldMap","fetchData","_ref","asyncToGenerator","regenerator_default","mark","_callee","_yield$axios$get","modifiedData","wrap","_context","prev","next","axios","get","sent","cases","abrupt","t0","console","log","stop","apply","this","arguments","fetchHistoryData","_ref2","_callee2","_yield$axios$get2","_context2","fetchCountriesName","_ref3","_callee3","_yield$axios$get3","_context3","item","fetchIndividualCountriesData","_ref4","_callee4","_yield$axios$get4","_context4","countryStyle","fillColor","fillOpacity","color","dashArray","LeafletMap","location","countrySelect","_useState","useState","_useState2","slicedToArray","setClickCountryName","center","lat","long","mapRef","useRef","style","marginTop","Map","zoom","margin","ref","TileLayer","attribution","url","GeoJSON","mapData","onEachFeature","layer","countryName","properties","bindPopup","on","click","event","current","leafletElement","fitBounds","getBounds","feature","mouseleave","resetStyle","Marker","position","App","setData","_useState3","_useState4","isloading","setIsloading","_useState5","_useState6","setCountry","_useState7","_useState8","setLocation","_useState9","_useState10","allCountryData","setAllCountryData","_useState11","_useState12","globalData","setGlobalData","_useState13","_useState14","setHistoryData","_useState15","_useState16","setCountryNames","_getGlobalData","fetcheddata","globalHistoryData","individualcountrydata","names","useEffect","getGlobalData","href","CountryPicker_CountryPicker","filteredCountryData","filter","includes","updated","countryInfo","handleIfSelectCountry","Cards_Cards","Chart_Chart","Map_LeafletMap","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"qshpHACAA,EAAAC,QAAA,CAAkBC,GAAA,kBAAAC,cAAA,6BAAAC,SAAA,wBAAAC,MAAA,0MC8EHC,MApEAC,IAGA,IAAIC,KAAKD,EAAME,KAAKC,YAsDjC,OApDEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,UAAWC,IAAOb,eAC3BQ,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,GAAI,GACPR,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOZ,SAAUgB,YAAU,cACzCT,EAAAC,EAAAC,cAAA,MAAIE,UAAU,IACXR,EAAMc,SAA6B,WAAlBd,EAAMc,QACpBd,EAAMc,QACN,eAHN,4BAMAV,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOX,OACrBM,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,MAAO,EACPC,IAAKjB,EAAME,KAAKgB,UAAUC,MAC1BC,UAAU,SAKlBhB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,GAAI,GACPR,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOZ,SAAUgB,YAAU,cACzCT,EAAAC,EAAAC,cAAA,MAAIE,UAAU,IACXR,EAAMc,SAA6B,WAAlBd,EAAMc,QACpBd,EAAMc,QACN,eAHN,4BAMAV,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOX,OACrBM,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,MAAO,EACPC,IAAKjB,EAAME,KAAKmB,UAAUF,MAC1BC,UAAU,SAKlBhB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,GAAI,GACPR,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOZ,SAAUgB,YAAU,cACzCT,EAAAC,EAAAC,cAAA,MAAIE,UAAU,IACXR,EAAMc,SAA6B,WAAlBd,EAAMc,QACpBd,EAAMc,QACN,eAHN,4BAMAV,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOX,OACrBM,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAASW,MAAO,EAAGC,IAAKjB,EAAME,KAAKoB,OAAOH,MAAOC,UAAU,oBCO1DG,MAhED,EACZrB,MAAQgB,YAAWG,YAAWC,UAC9BR,UACAU,kBAEA,MAAMC,EAAYD,EAChBpB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACExB,KAAM,CAEJyB,OAAQC,OAAOC,KAAKL,EAAYN,WAChCY,SAAU,CACR,CAEE5B,KAAM0B,OAAOG,OAAOP,EAAYN,WAEhCc,MAAO,WACPC,YAAa,OACbC,MAAM,EACNC,qBAAsB,QAExB,CAEEjC,KAAM0B,OAAOG,OAAOP,EAAYF,QAEhCU,MAAO,QACPC,YAAa,MACbC,MAAM,EACNC,qBAAsB,MACtBC,gBAAiB,aAIvBvB,YAAU,WACVwB,OAAO,KACPC,MAAM,SAEN,KACEC,EAAWrB,EACfd,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACExB,KAAM,CACJyB,OAAQ,CAAC,WAAY,YAAa,UAClCG,SAAU,CACR,CACEE,MAAO,SACPI,gBAAiB,CACf,uBACA,uBACA,wBAEFlC,KAAM,CAACgB,EAAUC,MAAOE,EAAUF,MAAOG,EAAOH,UAItDqB,QAAS,CACPC,OAAQ,CAAEC,SAAS,IAGrBL,OAAO,KACPC,MAAM,SAEN,KACJ,OAAOlC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAwB,WAAZO,EAAuByB,EAAWd,IChCxCkB,MA7BO,EAAGC,gBAAeC,kBAEpCzC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACE1C,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wCAEbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,UACEE,UAAU,eACVuC,KAAK,GACLC,GAAG,GACHC,SAAWC,GAAMN,EAAcM,EAAEC,OAAOhC,QAExCf,EAAAC,EAAAC,cAAA,UAAQ8C,cAAY,GAApB,UACCP,EACGA,EAAaQ,IAAI,CAACvC,EAASwC,IACzBlD,EAAAC,EAAAC,cAAA,UAAQiD,IAAKD,EAAOnC,MAAOL,GACxBA,IAGL,iCCmGH0C,qBCvHR,MAAMC,EAAS,eAAAC,EAAA9B,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAAvD,EAAAwD,KAAG,SAAAC,IAAA,IAAAC,EAAA7D,EAAA8D,EAAA,OAAAJ,EAAAvD,EAAA4D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aACX,6CADWF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIEC,IAAMC,IAHnB,8CADW,cAAAP,EAAAG,EAAAK,KAIbrE,EAJa6D,EAIb7D,KAEF8D,EAAe,CACnB9C,UAAW,CAAEC,MAAOjB,EAAKsE,OACzBnD,UAAW,CAAEF,MAAOjB,EAAKmB,WACzBC,OAAQ,CAAEH,MAAOjB,EAAKoB,QACtBnB,WAAYD,EAAKC,YAVE+D,EAAAO,OAAA,SAadT,GAbc,QAAAE,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAerBS,QAAQC,IAARV,EAAAQ,IAfqB,yBAAAR,EAAAW,SAAAf,EAAA,kBAAH,yBAAAJ,EAAAoB,MAAAC,KAAAC,YAAA,GAmBTC,EAAgB,eAAAC,EAAAtD,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAAvD,EAAAwD,KAAG,SAAAsB,IAAA,IAAAC,EAAAlF,EAAA8D,EAAA,OAAAJ,EAAAvD,EAAA4D,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,aAClB,8CADkBiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAKLC,IAAMC,IAJnB,+CADkB,cAAAc,EAAAC,EAAAd,KAKpBrE,EALoBkF,EAKpBlF,KAUF8D,EAAe,CACnB9C,UAAWhB,EAAKsE,MAChBlD,OAAQpB,EAAKoB,OACbD,UAAWnB,EAAKmB,WAlBUgE,EAAAZ,OAAA,SAsBrBT,GAtBqB,QAAAqB,EAAAlB,KAAA,GAAAkB,EAAAX,GAAAW,EAAA,SAwB5BV,QAAQC,IAARS,EAAAX,IAxB4B,yBAAAW,EAAAR,SAAAM,EAAA,kBAAH,yBAAAD,EAAAJ,MAAAC,KAAAC,YAAA,GA6BhBM,EAAkB,eAAAC,EAAA3D,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAAvD,EAAAwD,KAAG,SAAA2B,IAAA,IAAAC,EAAAvF,EAAA,OAAA0D,EAAAvD,EAAA4D,KAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,aACpB,wDADoBsB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAGPC,IAAMC,IAFnB,yDADoB,cAAAmB,EAAAC,EAAAnB,KAGtBrE,EAHsBuF,EAGtBvF,KAHsBwF,EAAAjB,OAAA,SAKvBvE,EAAKmD,IAAKsC,GAASA,EAAK7E,UALD,OAAA4E,EAAAvB,KAAA,EAAAuB,EAAAhB,GAAAgB,EAAA,SAO9Bf,QAAQC,IAARc,EAAAhB,IAP8B,yBAAAgB,EAAAb,SAAAW,EAAA,iBAAH,yBAAAD,EAAAT,MAAAC,KAAAC,YAAA,GAWlBY,EAA4B,eAAAC,EAAAjE,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAAvD,EAAAwD,KAAG,SAAAiC,IAAA,IAAAC,EAAA7F,EAAA,OAAA0D,EAAAvD,EAAA4D,KAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,aAC9B,wDAD8B4B,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAGjBC,IAAMC,IAFnB,yDAD8B,cAAAyB,EAAAC,EAAAzB,KAGhCrE,EAHgC6F,EAGhC7F,KAHgC8F,EAAAvB,OAAA,SAKjCvE,GALiC,OAAA8F,EAAA7B,KAAA,EAAA6B,EAAAtB,GAAAsB,EAAA,SAOxCrB,QAAQC,IAARoB,EAAAtB,IAPwC,yBAAAsB,EAAAnB,SAAAiB,EAAA,iBAAH,yBAAAD,EAAAf,MAAAC,KAAAC,YAAA,oDC1DzC,MAAMiB,EAAe,CACnBC,UAAW,MACXC,YAAa,GACbC,MAAO,QACPC,UAAW,KA6DEC,MA1DI,EAAGC,WAAUC,oBAAoB,MAAAC,EACFC,mBAAS,IADPC,EAAA/E,OAAAgF,EAAA,EAAAhF,CAAA6E,EAAA,GACzBI,GADyBF,EAAA,GAAAA,EAAA,IAGlD,IAAIG,EAASP,EAAW,CAACA,EAASQ,IAAKR,EAASS,MAAQ,CAAC,MAAO,IAEhE,MAAMC,EAASC,iBAAO,MA6BtB,OACE9G,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAI6G,MAAO,CAAEC,UAAW,SAAxB,yBACAhH,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CACEP,OAAQA,EACRQ,KAAM,EACNH,MAAO,CAAE7E,MAAO,OAAQD,OAAQ,QAASkF,OAAQ,QACjDC,IAAKP,GAEL7G,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAENvH,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CACET,MAAOlB,EACP/F,KAAM2H,EACNC,cA5Cc,CAAChH,EAASiH,EAAOvB,KACrC,MAAMwB,EAAclH,EAAQmH,WAAWlF,KAGvCgF,EAAMG,UAAUF,GAQhBD,EAAMI,GAAG,CACPC,MAAQC,IAGMpB,EAAOqB,QAAQC,eAEvBC,UAAUH,EAAMlF,OAAOsF,aAE3B5B,EAAoBwB,EAAMlF,OAAOuF,QAAQT,WAAWlF,OAEtD4F,WAAaN,IACXA,EAAMlF,OAAOyF,mBAuBbxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CAAQC,SAAUhC,OCrDX,SAASiC,IAAM,MAAAtC,EACJC,mBAAS,IADLC,EAAA/E,OAAAgF,EAAA,EAAAhF,CAAA6E,EAAA,GACrBvG,EADqByG,EAAA,GACfqC,EADerC,EAAA,GAAAsC,EAEMvC,oBAAS,GAFfwC,EAAAtH,OAAAgF,EAAA,EAAAhF,CAAAqH,EAAA,GAErBE,EAFqBD,EAAA,GAEVE,EAFUF,EAAA,GAAAG,EAGE3C,qBAHF4C,EAAA1H,OAAAgF,EAAA,EAAAhF,CAAAyH,EAAA,GAGrBvI,EAHqBwI,EAAA,GAGZC,EAHYD,EAAA,GAAAE,EAII9C,mBAAS,MAJb+C,EAAA7H,OAAAgF,EAAA,EAAAhF,CAAA4H,EAAA,GAIrBjD,EAJqBkD,EAAA,GAIXC,EAJWD,EAAA,GAAAE,EAKgBjD,qBALhBkD,EAAAhI,OAAAgF,EAAA,EAAAhF,CAAA+H,EAAA,GAKrBE,EALqBD,EAAA,GAKLE,EALKF,EAAA,GAAAG,EAMQrD,qBANRsD,EAAApI,OAAAgF,EAAA,EAAAhF,CAAAmI,EAAA,GAMrBE,EANqBD,EAAA,GAMTE,EANSF,EAAA,GAAAG,EAOUzD,qBAPV0D,EAAAxI,OAAAgF,EAAA,EAAAhF,CAAAuI,EAAA,GAOrB3I,EAPqB4I,EAAA,GAORC,EAPQD,EAAA,GAAAE,EAQY5D,qBARZ6D,EAAA3I,OAAAgF,EAAA,EAAAhF,CAAA0I,EAAA,GAQrBzH,EARqB0H,EAAA,GAQPC,EAROD,EAAA,YAAAE,IAAA,OAAAA,EAAA7I,OAAA+B,EAAA,EAAA/B,CAAAgC,EAAAvD,EAAAwD,KAS5B,SAAAC,IAAA,IAAA4G,EAAAC,EAAAC,EAAAC,EAAA,OAAAjH,EAAAvD,EAAA4D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAC4BX,IAD5B,cACQiH,EADRxG,EAAAK,KAAAL,EAAAE,KAAA,EAEkCa,IAFlC,cAEQ0F,EAFRzG,EAAAK,KAAAL,EAAAE,KAAA,EAGsCwB,IAHtC,cAGQgF,EAHR1G,EAAAK,KAAAL,EAAAE,KAAA,GAIsBkB,IAJtB,QAIQuF,EAJR3G,EAAAK,KAKE2F,EAAcQ,GACd1B,EAAQ0B,GACRL,EAAeM,GACfb,EAAkBc,GAClBJ,EAAgBK,GAChBzB,GAAa,GAVf,yBAAAlF,EAAAW,SAAAf,OAT4BgB,MAAAC,KAAAC,WAyC5B8F,oBAAU,KACRvB,EAAW,UA1Ce,WAAAkB,EAAA3F,MAAAC,KAAAC,WA2C1B+F,IACC,IAUH,OACE3K,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgBK,YAAU,aACvCT,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACfJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uCAAd,0BAGAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAd,gCAC+BJ,EAAAC,EAAAC,cAAA,iBAC7BF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,aAAawK,KAAK,qCAA/B,8BAIF5K,EAAAC,EAAAC,cAAC2K,EAAD,CACErI,cApBuB9B,IAC3ByI,EAAWzI,GACC,WAAZA,GAXAkI,EAAQiB,GACRP,EAAY,OAjBiB5I,KAC7B,MAAMoK,EAAsBrB,EAAesB,OACxCxF,GAASA,EAAK7E,UAAYA,GAAW6E,EAAK7E,QAAQsK,SAAStK,IAE9DkI,EAAQ,CACN9H,UAAW,CAAEC,MAAO+J,EAAoB,GAAG1G,OAC3CnD,UAAW,CAAEF,MAAO+J,EAAoB,GAAG7J,WAC3CC,OAAQ,CAAEH,MAAO+J,EAAoB,GAAG5J,QACxCnB,WAAY+K,EAAoB,GAAGG,UAErC3B,EAAY,CACV3C,IAAKmE,EAAoB,GAAGI,YAAYvE,IACxCC,KAAMkE,EAAoB,GAAGI,YAAYtE,QAiBvCuE,CAAsBzK,IAiBtB+B,aAAcA,IAGfsG,EACC/I,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAACkL,EAAD,CAAOtL,KAAMA,EAAMY,QAASA,IAE9BV,EAAAC,EAAAC,cAAA,QAAME,UAAU,OACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACmL,EAAD,CAAOvL,KAAMA,EAAMY,QAASA,EAASU,YAAaA,KAIpDpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAACoL,EAAD,CAAYlF,cAAe1F,EAASyF,SAAUA,OCzFxD,MAAMoF,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP3L,EAAAC,EAAAC,cAACF,EAAAC,EAAM2L,WAAP,KACE5L,EAAAC,EAAAC,cAACyI,EAAD,OAEF4C","file":"static/js/main.e0077b62.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bk\":\"Cards_bk__2znTp\",\"cardContainer\":\"Cards_cardContainer__2gxmz\",\"infoCard\":\"Cards_infoCard__3tpYn\",\"digit\":\"Cards_digit__1SieJ\"};","import React from \"react\";\r\n// import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.scss\";\r\n// import \"./Cards.scss\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport CountUp from \"react-countup\";\r\nimport PropTypes from \"prop-types\";\r\nconst Cards = (props) => {\r\n  // console.log(\"cards props\", props);\r\n\r\n  const date = new Date(props.data.lastUpdate); //更新時間\r\n  const display = (\r\n    <Container className={styles.cardContainer}>\r\n      <Row>\r\n        <Col md={4}>\r\n          <div className={styles.infoCard} data-test=\"casesCount\">\r\n            <h5 className=\"\">\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              確診人數\r\n            </h5>\r\n            <div className={styles.digit}>\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.confirmed.value}\r\n                separator=\",\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col md={4}>\r\n          <div className={styles.infoCard} data-test=\"casesCount\">\r\n            <h5 className=\"\">\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              復原人數\r\n            </h5>\r\n            <div className={styles.digit}>\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.recovered.value}\r\n                separator=\",\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col md={4}>\r\n          <div className={styles.infoCard} data-test=\"casesCount\">\r\n            <h5 className=\"\">\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              死亡人數\r\n            </h5>\r\n            <div className={styles.digit}>\r\n              <CountUp start={0} end={props.data.deaths.value} separator=\",\" />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n  return display;\r\n};\r\n//props型別檢查\r\nCards.propTypes = {\r\n  country: PropTypes.string,\r\n  data: PropTypes.shape({\r\n    confirmed: PropTypes.object,\r\n    deaths: PropTypes.object,\r\n    recovered: PropTypes.object,\r\n  }),\r\n};\r\nexport default Cards;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Chart = ({\r\n  data: { confirmed, recovered, deaths },\r\n  country,\r\n  historyData,\r\n}) => {\r\n  const linechart = historyData ? (\r\n    <Line\r\n      data={{\r\n        // labels: dailydata.map((item) => item.date),\r\n        labels: Object.keys(historyData.confirmed),\r\n        datasets: [\r\n          {\r\n            // data: dailydata.map((item) => item.confirmed),\r\n            data: Object.values(historyData.confirmed),\r\n\r\n            label: \"Infected\",\r\n            borderColor: \"grey\",\r\n            fill: true,\r\n            pointBackgroundColor: \"grey\",\r\n          },\r\n          {\r\n            // data: dailydata.map((item) => item.deaths),\r\n            data: Object.values(historyData.deaths),\r\n\r\n            label: \"death\",\r\n            borderColor: \"red\",\r\n            fill: true,\r\n            pointBackgroundColor: \"red\",\r\n            backgroundColor: \"#fc7272\",\r\n          },\r\n        ],\r\n      }}\r\n      data-test=\"linePlot\"\r\n      height=\"50\"\r\n      width=\"100%\"\r\n    />\r\n  ) : null;\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        // title: { display: true, text: `Current state in ${country}` }\r\n      }}\r\n      height=\"50\"\r\n      width=\"100%\"\r\n    />\r\n  ) : null;\r\n  return <Container>{country !== \"Global\" ? barChart : linechart}</Container>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\n// import { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\r\n// import { fetchCountriesName } from \"../../api\";\r\n\r\nconst CountryPicker = ({ changeCountry, countryNames }) => {\r\n  return (\r\n    <>\r\n      <form>\r\n        <div className=\"form-row justify-content-center my-4\">\r\n          {/* <label for=\"\">123</label> */}\r\n          <div className=\"col-10 col-lg-2\">\r\n            <select\r\n              className=\"form-control\"\r\n              name=\"\"\r\n              id=\"\"\r\n              onChange={(e) => changeCountry(e.target.value)}\r\n            >\r\n              <option defaultValue>Global</option>\r\n              {countryNames\r\n                ? countryNames.map((country, index) => (\r\n                    <option key={index} value={country}>\r\n                      {country}\r\n                    </option>\r\n                  ))\r\n                : \"\"}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { geoMercator, geoPath, geoGraticule10, geoEqualEarth } from \"d3-geo\";\r\nimport $ from \"jquery\";\r\n\r\nfunction WorldMap({ country }) {\r\n  const [worlddata, setWorlddata] = useState([]);\r\n  const [lastcountry, setLastCountry] = useState({ name: \"123\", color: \"123\" });\r\n\r\n  console.log(\"map country\", country);\r\n  const projection = geoEqualEarth()\r\n    .scale(160)\r\n    .translate([800 / 2, 450 / 2]);\r\n  useEffect(() => {\r\n    fetch(\"map/ne_110m_admin_0_countries_geojson.json\")\r\n      // fetch(\"./map/test.json\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        // console.log(\"world\", data);\r\n        setWorlddata(data.features);\r\n        // draw(data);\r\n      });\r\n    const map = d3\r\n      .select(\"#map\")\r\n      .attr(\"width\", 500)\r\n      .attr(\"height\", 500);\r\n    function draw(mapData) {\r\n      // 設定投影中心點與縮放倍率\r\n      const projection = d3.geoMercator().translate([1000 / 2, 1000 / 2]);\r\n\r\n      // 將投影資料轉換為路徑\r\n      const path = d3.geoPath().projection(projection);\r\n\r\n      // 繪製地圖\r\n      map\r\n        .selectAll(\"path\")\r\n        .data(mapData.objects.ne_110m_land.geometries)\r\n        .enter()\r\n        .append(\"path\")\r\n        .attr(\"d\", path)\r\n        .attr(\"stroke\", \"black\")\r\n        .attr(\"stroke-width\", \"0.7\")\r\n        .attr(\"fill\", \"steelblue\")\r\n        .on(\"mouseover\", function() {\r\n          d3.select(this).attr(\"fill\", \"#007bff\");\r\n        })\r\n        // 滑鼠碰到後改變顏色\r\n        .on(\"mouseleave\", function() {\r\n          d3.select(this).attr(\"fill\", \"steelblue\");\r\n        });\r\n      // 滑鼠離開將顏色變回\r\n    }\r\n  }, []);\r\n  //ADD function to svg\r\n  // const handleCountryEnter = index => {\r\n  //   // console.log('hover on',worlddata[index].properties.NAME);\r\n  //   $(\"#countryname\").text(\"目前國家: \" + worlddata[index].properties.NAME);\r\n  //   // $('path').attr('fill','red')\r\n  // };\r\n  let lastpath; //save last target\r\n  let lastpathcolor; //save last target color\r\n  const handleClick = e => {\r\n    // console.log(e.target);\r\n    $(lastpath).attr(\"fill\", lastpathcolor);\r\n    lastpathcolor = $(e.target).attr(\"fill\");\r\n    lastpath = e.target;\r\n    console.log(\"lastpath\", lastpath);\r\n    console.log(\"lastpathcolor\", lastpathcolor);\r\n    // $('g.countries').find('path').attr('fill','red')\r\n    // $(\"path[fill='red']\").attr('fill',lastpathcolor)\r\n\r\n    $(e.target).attr(\"fill\", \"red\");\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"props\", country);\r\n    //將上一個選擇的country設定回預設\r\n    console.log(\"lastcountry prop\", lastcountry.name);\r\n    $(`path[data-countryname=${lastcountry.name}]`).attr(\r\n      \"fill\",\r\n      lastcountry.color\r\n    );\r\n    let lastcountryproperty = {\r\n      name: country,\r\n      color: $(`path[data-countryname=${country}]`).attr(\"fill\")\r\n    };\r\n    setLastCountry(lastcountryproperty);\r\n    // console.log('last country',lastcountryselect)\r\n    $(`path[data-countryname=${country}]`).attr(\"fill\", \"blue\");\r\n  }, [country]);\r\n  return (\r\n    <>\r\n      <h5 className=\"my-3\" id=\"countryname\">\r\n        {/* 目前國家: */}\r\n      </h5>\r\n      <p style={{ color: \"blue\" }}>選取不同國家在地圖上會變藍色</p>\r\n      <div id=\"map\">\r\n        <svg\r\n          style={{ border: \"1px solid gray\" }}\r\n          width=\"1000\"\r\n          height=\"550\"\r\n          viewBox=\"0 0 800 450\"\r\n        >\r\n          <g className=\"countries\">\r\n            {worlddata.map((d, i) => (\r\n              <path\r\n                key={`path-${i}`}\r\n                d={geoPath().projection(projection)(d)}\r\n                className=\"country\"\r\n                fill={`rgba(38,50,56,${(1 / worlddata.length) * i})`}\r\n                stroke=\"#FFFFFF\"\r\n                strokeWidth={0.5}\r\n                // onMouseEnter={() => handleCountryEnter(i)}\r\n                // onClick={e => handleClick(e)}\r\n                data-countryname={d.properties.NAME}\r\n              />\r\n            ))}\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WorldMap;\r\n","import axios from \"axios\";\r\n\r\n// const url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async () => {\r\n  const url = \"https://corona.lmao.ninja/v2/all?yesterday\";\r\n\r\n  try {\r\n    const { data } = await axios.get(url);\r\n\r\n    const modifiedData = {\r\n      confirmed: { value: data.cases },\r\n      recovered: { value: data.recovered },\r\n      deaths: { value: data.deaths },\r\n      lastUpdate: data.lastUpdate,\r\n    };\r\n    // console.log(\"fetchData\", modifiedData);\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchHistoryData = async () => {\r\n  const url = \"https://corona.lmao.ninja/v2/historical/all\";\r\n  try {\r\n    // const response = await axios.get(url);\r\n    // const { data } = await axios.get(`${url}/daily`);\r\n    const { data } = await axios.get(url);\r\n\r\n    // console.log(\"data_daily\", data);\r\n\r\n    // const modifiedData = data.map((daily) => ({\r\n    //   confirmed: daily.confirmed.total,\r\n    //   deaths: daily.deaths.total,\r\n    //   recovered: daily.recovered.total,\r\n    //   date: daily.reportDate,\r\n    // }));\r\n    const modifiedData = {\r\n      confirmed: data.cases,\r\n      deaths: data.deaths,\r\n      recovered: data.recovered,\r\n    };\r\n    // console.log(\"data_daily_modify\", modifiedData);\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n//country name\r\nexport const fetchCountriesName = async () => {\r\n  const url = \"https://corona.lmao.ninja/v2/countries?yesterday&sort\";\r\n  try {\r\n    const { data } = await axios.get(url);\r\n    // console.log('data',data);\r\n    return data.map((item) => item.country);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n//individual country data\r\nexport const fetchIndividualCountriesData = async () => {\r\n  const url = \"https://corona.lmao.ninja/v2/countries?yesterday&sort\";\r\n  try {\r\n    const { data } = await axios.get(url);\r\n    // console.log('data',data);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Map, TileLayer, GeoJSON, Marker } from \"react-leaflet\";\r\nimport mapData from \"./custom.geo.json\";\r\n\r\n//color:邊線顏色,dashArray:邊線的虛線類型\r\nconst countryStyle = {\r\n  fillColor: \"red\",\r\n  fillOpacity: 0.3,\r\n  color: \"white\",\r\n  dashArray: \"3\",\r\n};\r\n\r\nconst LeafletMap = ({ location, countrySelect }) => {\r\n  const [clickCountryName, setClickCountryName] = useState(\"\");\r\n  //   let center = [37.8, -96];\r\n  let center = location ? [location.lat, location.long] : [37.8, -96]; //設置地圖中心點座標\r\n\r\n  const mapRef = useRef(null);\r\n  const onEachCountry = (country, layer, countrySelect) => {\r\n    const countryName = country.properties.name;\r\n    // console.log(\"countryName includes?\", countryName.includes(countrySelect));\r\n\r\n    layer.bindPopup(countryName); //觸發顯示國家名\r\n\r\n    // layer.options.fillColor = \"green\";\r\n\r\n    // layer.options.fillColor = countryName.includes(countrySelect)\r\n    //   ? \"red\"\r\n    //   : \"green\"; //改背景顏色\r\n\r\n    layer.on({\r\n      click: (event) => {\r\n        // console.log(\"click\", event.target);\r\n\r\n        const map = mapRef.current.leafletElement;\r\n        // console.log(mapRef);\r\n        map.fitBounds(event.target.getBounds()); //將click到的地區擺到正中央\r\n\r\n        setClickCountryName(event.target.feature.properties.name);\r\n      },\r\n      mouseleave: (event) => {\r\n        event.target.resetStyle(); //no effect?\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h5 style={{ marginTop: \"25px\" }}>WHERE IS THE COUNTRY?</h5>\r\n      <Map\r\n        center={center}\r\n        zoom={3}\r\n        style={{ width: \"100%\", height: \"300px\", margin: \"10px\" }}\r\n        ref={mapRef}\r\n      >\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <GeoJSON\r\n          style={countryStyle}\r\n          data={mapData}\r\n          onEachFeature={onEachCountry}\r\n        />\r\n        <Marker position={center} />\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeafletMap;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport {\r\n  fetchData,\r\n  fetchHistoryData,\r\n  fetchIndividualCountriesData,\r\n  fetchCountriesName,\r\n} from \"./api\";\r\nimport LeafletMap from \"./components/Map/LeafletMap\";\r\nexport default function App() {\r\n  const [data, setData] = useState({}); //傳給子元件的資料\r\n  const [isloading, setIsloading] = useState(true);\r\n  const [country, setCountry] = useState();\r\n  const [location, setLocation] = useState(null); //經緯度\r\n  const [allCountryData, setAllCountryData] = useState(); //存所有國家資料\r\n  const [globalData, setGlobalData] = useState(); //存全球資料\r\n  const [historyData, setHistoryData] = useState();\r\n  const [countryNames, setCountryNames] = useState();\r\n  async function getGlobalData() {\r\n    const fetcheddata = await fetchData();\r\n    const globalHistoryData = await fetchHistoryData(); //歷史資料\r\n    const individualcountrydata = await fetchIndividualCountriesData(); //individual country data\r\n    const names = await fetchCountriesName();\r\n    setGlobalData(fetcheddata);\r\n    setData(fetcheddata);\r\n    setHistoryData(globalHistoryData);\r\n    setAllCountryData(individualcountrydata);\r\n    setCountryNames(names);\r\n    setIsloading(false);\r\n  }\r\n\r\n  const handleIfSelectCountry = (country) => {\r\n    const filteredCountryData = allCountryData.filter(\r\n      (item) => item.country === country || item.country.includes(country)\r\n    );\r\n    setData({\r\n      confirmed: { value: filteredCountryData[0].cases },\r\n      recovered: { value: filteredCountryData[0].recovered },\r\n      deaths: { value: filteredCountryData[0].deaths },\r\n      lastUpdate: filteredCountryData[0].updated,\r\n    });\r\n    setLocation({\r\n      lat: filteredCountryData[0].countryInfo.lat,\r\n      long: filteredCountryData[0].countryInfo.long,\r\n    });\r\n  };\r\n  const handleIfSelectGlobal = () => {\r\n    setData(globalData);\r\n    setLocation(null);\r\n  };\r\n  useEffect(() => {\r\n    setCountry(\"Global\");\r\n    getGlobalData();\r\n  }, []);\r\n\r\n  //處理country選擇\r\n  const handleCountryChange = (country) => {\r\n    setCountry(country);\r\n    country === \"Global\"\r\n      ? handleIfSelectGlobal()\r\n      : handleIfSelectCountry(country);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App appCustom\" data-test=\"appCustom\">\r\n      <div className=\"appBackground\" />\r\n      <h2 className=\"text-uppercase mb-4 py-4 text-white\">\r\n        Covid19 live info demo\r\n      </h2>\r\n      <h6 className=\"text-white\">\r\n        The COVID-19 info API is from<span> </span>\r\n        <a className=\"text-white\" href=\"https://github.com/disease-sh/API\">\r\n          github.com/NovelCOVID/API\r\n        </a>\r\n      </h6>\r\n      <CountryPicker\r\n        changeCountry={handleCountryChange}\r\n        countryNames={countryNames}\r\n      />\r\n\r\n      {isloading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <Cards data={data} country={country} />\r\n      )}\r\n      <main className=\"row\">\r\n        <div className=\"col-12 col-md-6\">\r\n          <Chart data={data} country={country} historyData={historyData} />\r\n        </div>\r\n\r\n        {/* <World country={country} /> */}\r\n        <div className=\"col-12 col-md-6\">\r\n          <LeafletMap countrySelect={country} location={location} />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}