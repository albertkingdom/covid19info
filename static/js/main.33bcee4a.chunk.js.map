{"version":3,"sources":["components/Carousel/Carousel.module.scss","components/Cards/Card.js","components/Cards/Cards.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/Map/World.js","components/Carousel/Carousel.js","api/index.js","components/Map/LeafletMap.js","App.js","index.js","components/Cards/Cards.module.scss"],"names":["module","exports","Card","country","data","title","Col","md","className","styles","infoCard","digit","start","end","value","separator","Cards","props","Date","lastUpdate","Container","cardContainer","column","confirmed","recovered","deaths","Chart","historyData","linechart","labels","Object","keys","datasets","values","label","borderColor","fill","pointBackgroundColor","backgroundColor","data-test","height","width","options","maintainAspectRatio","barChart","legend","display","style","padding","CountryPicker","changeCountry","countryNames","name","id","onChange","e","target","defaultValue","map","index","key","WorldMap","Carousel","children","useState","select","setSelect","carousel","slide","active","item","onClick","buttonLeft","buttonRight","fetchData","a","axios","get","modifiedData","cases","console","log","fetchHistoryData","fetchCountriesName","fetchIndividualCountriesData","countryStyle","fillColor","fillOpacity","color","dashArray","LeafletMap","location","countrySelect","center","setCenter","useEffect","navigator","geolocation","getCurrentPosition","position","coords","currentLocation","latitude","longitude","lat","long","mapRef","useRef","Map","zoom","ref","TileLayer","attribution","url","GeoJSON","mapData","onEachFeature","layer","countryName","properties","bindPopup","on","click","event","current","leafletElement","fitBounds","getBounds","mouseleave","resetStyle","Marker","App","setData","setIsloading","setCountry","setLocation","allCountryData","setAllCountryData","globalData","setGlobalData","setHistoryData","setCountryNames","fetcheddata","globalHistoryData","individualcountrydata","names","getGlobalData","href","filteredCountryData","filter","includes","updated","countryInfo","handleIfSelectCountry","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.33bcee4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"carousel\":\"Carousel_carousel__QZuyW\",\"slide\":\"Carousel_slide__1UCmG\",\"active\":\"Carousel_active__2ob9j\",\"item\":\"Carousel_item__3dMM5\",\"button\":\"Carousel_button__3ye40\",\"buttonLeft\":\"Carousel_buttonLeft__MzMvF\",\"buttonRight\":\"Carousel_buttonRight__8Cd4u\"};","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport CountUp from \"react-countup\";\n\nimport styles from \"./Cards.module.scss\";\n\nexport default function Card({ country, data, title }) {\n  return (\n    <Col md={12}>\n      <div className={styles.infoCard}>\n        <h5 className=\"\">\n          {country && country !== \"Global\" ? country : \"全球\"}\n          {title}\n        </h5>\n        <div className={styles.digit}>\n          {data && <CountUp start={0} end={data.value} separator=\",\" />}\n        </div>\n      </div>\n    </Col>\n  );\n}\n","import React from \"react\";\r\n// import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.scss\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Card from \"./Card\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cards = (props) => {\r\n  const date = new Date(props.data.lastUpdate); //更新時間\r\n  const display = (\r\n    <Container className={styles.cardContainer}>\r\n      {/* <Row> */}\r\n      <Card\r\n        column={12}\r\n        country={props.country}\r\n        data={props.data.confirmed}\r\n        title=\"確診人數\"\r\n      />\r\n\r\n      <Card\r\n        column={12}\r\n        country={props.country}\r\n        data={props.data.recovered}\r\n        title=\"復原人數\"\r\n      />\r\n\r\n      <Card\r\n        column={12}\r\n        country={props.country}\r\n        data={props.data.deaths}\r\n        title=\"死亡人數\"\r\n      />\r\n      {/* </Row> */}\r\n    </Container>\r\n  );\r\n  return display;\r\n};\r\n//props型別檢查\r\nCards.propTypes = {\r\n  country: PropTypes.string,\r\n  data: PropTypes.shape({\r\n    confirmed: PropTypes.object,\r\n    deaths: PropTypes.object,\r\n    recovered: PropTypes.object,\r\n  }),\r\n};\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Chart = ({\r\n  data: { confirmed, recovered, deaths },\r\n  country,\r\n  historyData,\r\n}) => {\r\n  const linechart = historyData ? (\r\n    <Line\r\n      data={{\r\n        // labels: dailydata.map((item) => item.date),\r\n        labels: Object.keys(historyData.confirmed),\r\n        datasets: [\r\n          {\r\n            // data: dailydata.map((item) => item.confirmed),\r\n            data: Object.values(historyData.confirmed),\r\n\r\n            label: \"Infected\",\r\n            borderColor: \"grey\",\r\n            fill: true,\r\n            pointBackgroundColor: \"grey\",\r\n          },\r\n          {\r\n            // data: dailydata.map((item) => item.deaths),\r\n            data: Object.values(historyData.deaths),\r\n\r\n            label: \"death\",\r\n            borderColor: \"red\",\r\n            fill: true,\r\n            pointBackgroundColor: \"red\",\r\n            backgroundColor: \"#fc7272\",\r\n          },\r\n        ],\r\n      }}\r\n      data-test=\"linePlot\"\r\n      height={\"90%\"}\r\n      width={\"100%\"}\r\n      options={{ maintainAspectRatio: false }}\r\n    />\r\n  ) : null;\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        maintainAspectRatio: false,\r\n        // title: { display: true, text: `Current state in ${country}` }\r\n      }}\r\n      height={90}\r\n      width={100}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <Container style={{ height: \"600px\", padding: \"20px\" }}>\r\n      {country !== \"Global\" ? barChart : linechart}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\n// import { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\r\n// import { fetchCountriesName } from \"../../api\";\r\n\r\nconst CountryPicker = ({ changeCountry, countryNames, country }) => {\r\n  return (\r\n    <>\r\n      <form>\r\n        <div className=\"form-row justify-content-center my-4\">\r\n          {/* <label for=\"\">123</label> */}\r\n          <div className=\"col-10 col-lg-2\">\r\n            <select\r\n              className=\"form-control\"\r\n              name=\"\"\r\n              id=\"\"\r\n              onChange={(e) => changeCountry(e.target.value)}\r\n              value={country}\r\n            >\r\n              <option defaultValue>Global</option>\r\n              {countryNames\r\n                ? countryNames.map((country, index) => (\r\n                    <option key={index} value={country}>\r\n                      {country}\r\n                    </option>\r\n                  ))\r\n                : \"\"}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { geoMercator, geoPath, geoGraticule10, geoEqualEarth } from \"d3-geo\";\nimport $ from \"jquery\";\n\nfunction WorldMap({ country }) {\n  const [worlddata, setWorlddata] = useState([]);\n  const [lastcountry, setLastCountry] = useState({ name: \"123\", color: \"123\" });\n\n  console.log(\"map country\", country);\n  const projection = geoEqualEarth()\n    .scale(160)\n    .translate([800 / 2, 450 / 2]);\n  useEffect(() => {\n    fetch(\"map/ne_110m_admin_0_countries_geojson.json\")\n      // fetch(\"./map/test.json\")\n      .then(res => res.json())\n      .then(data => {\n        // console.log(\"world\", data);\n        setWorlddata(data.features);\n        // draw(data);\n      });\n    const map = d3\n      .select(\"#map\")\n      .attr(\"width\", 500)\n      .attr(\"height\", 500);\n    function draw(mapData) {\n      // 設定投影中心點與縮放倍率\n      const projection = d3.geoMercator().translate([1000 / 2, 1000 / 2]);\n\n      // 將投影資料轉換為路徑\n      const path = d3.geoPath().projection(projection);\n\n      // 繪製地圖\n      map\n        .selectAll(\"path\")\n        .data(mapData.objects.ne_110m_land.geometries)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", path)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"0.7\")\n        .attr(\"fill\", \"steelblue\")\n        .on(\"mouseover\", function() {\n          d3.select(this).attr(\"fill\", \"#007bff\");\n        })\n        // 滑鼠碰到後改變顏色\n        .on(\"mouseleave\", function() {\n          d3.select(this).attr(\"fill\", \"steelblue\");\n        });\n      // 滑鼠離開將顏色變回\n    }\n  }, []);\n  //ADD function to svg\n  // const handleCountryEnter = index => {\n  //   // console.log('hover on',worlddata[index].properties.NAME);\n  //   $(\"#countryname\").text(\"目前國家: \" + worlddata[index].properties.NAME);\n  //   // $('path').attr('fill','red')\n  // };\n  let lastpath; //save last target\n  let lastpathcolor; //save last target color\n  const handleClick = e => {\n    // console.log(e.target);\n    $(lastpath).attr(\"fill\", lastpathcolor);\n    lastpathcolor = $(e.target).attr(\"fill\");\n    lastpath = e.target;\n    console.log(\"lastpath\", lastpath);\n    console.log(\"lastpathcolor\", lastpathcolor);\n    // $('g.countries').find('path').attr('fill','red')\n    // $(\"path[fill='red']\").attr('fill',lastpathcolor)\n\n    $(e.target).attr(\"fill\", \"red\");\n  };\n  useEffect(() => {\n    console.log(\"props\", country);\n    //將上一個選擇的country設定回預設\n    console.log(\"lastcountry prop\", lastcountry.name);\n    $(`path[data-countryname=${lastcountry.name}]`).attr(\n      \"fill\",\n      lastcountry.color\n    );\n    let lastcountryproperty = {\n      name: country,\n      color: $(`path[data-countryname=${country}]`).attr(\"fill\")\n    };\n    setLastCountry(lastcountryproperty);\n    // console.log('last country',lastcountryselect)\n    $(`path[data-countryname=${country}]`).attr(\"fill\", \"blue\");\n  }, [country]);\n  return (\n    <>\n      <h5 className=\"my-3\" id=\"countryname\">\n        {/* 目前國家: */}\n      </h5>\n      <p style={{ color: \"blue\" }}>選取不同國家在地圖上會變藍色</p>\n      <div id=\"map\">\n        <svg\n          style={{ border: \"1px solid gray\" }}\n          width=\"1000\"\n          height=\"550\"\n          viewBox=\"0 0 800 450\"\n        >\n          <g className=\"countries\">\n            {worlddata.map((d, i) => (\n              <path\n                key={`path-${i}`}\n                d={geoPath().projection(projection)(d)}\n                className=\"country\"\n                fill={`rgba(38,50,56,${(1 / worlddata.length) * i})`}\n                stroke=\"#FFFFFF\"\n                strokeWidth={0.5}\n                // onMouseEnter={() => handleCountryEnter(i)}\n                // onClick={e => handleClick(e)}\n                data-countryname={d.properties.NAME}\n              />\n            ))}\n          </g>\n        </svg>\n      </div>\n    </>\n  );\n}\n\nexport default WorldMap;\n","import React, { useState } from \"react\";\nimport styles from \"./Carousel.module.scss\";\n\nexport default function Carousel({ children }) {\n  const [select, setSelect] = useState(1);\n  return (\n    <>\n      <div className={styles.carousel}>\n        <div className={`${styles.slide} ${select === 2 ? styles.active : \"\"}`}>\n          <div className={`${styles.item} item1`}>{children[0]}</div>\n          <div className={`${styles.item} item2`}>{children[1]}</div>\n        </div>\n      </div>\n      <button onClick={() => setSelect(1)} className={`${styles.buttonLeft}`} >\n        <i className=\"fas fa-arrow-left\"></i>\n      </button>\n      <button onClick={() => setSelect(2)} className={styles.buttonRight}>\n        <i className=\"fas fa-arrow-right\"></i>\n      </button>\n    </>\n  );\n}\n","import axios from \"axios\";\r\n\r\n// const url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async () => {\r\n  const url = \"https://corona.lmao.ninja/v2/all?yesterday\";\r\n\r\n  try {\r\n    const { data } = await axios.get(url);\r\n\r\n    const modifiedData = {\r\n      confirmed: { value: data.cases },\r\n      recovered: { value: data.recovered },\r\n      deaths: { value: data.deaths },\r\n      lastUpdate: data.lastUpdate,\r\n    };\r\n    // console.log(\"fetchData\", modifiedData);\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchHistoryData = async () => {\r\n  const url = \"https://corona.lmao.ninja/v2/historical/all\";\r\n  try {\r\n    // const response = await axios.get(url);\r\n    // const { data } = await axios.get(`${url}/daily`);\r\n    const { data } = await axios.get(url);\r\n\r\n    // console.log(\"data_daily\", data);\r\n\r\n    // const modifiedData = data.map((daily) => ({\r\n    //   confirmed: daily.confirmed.total,\r\n    //   deaths: daily.deaths.total,\r\n    //   recovered: daily.recovered.total,\r\n    //   date: daily.reportDate,\r\n    // }));\r\n    const modifiedData = {\r\n      confirmed: data.cases,\r\n      deaths: data.deaths,\r\n      recovered: data.recovered,\r\n    };\r\n    // console.log(\"data_daily_modify\", modifiedData);\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n//country name\r\nexport const fetchCountriesName = async () => {\r\n  const url = \"https://corona.lmao.ninja/v2/countries?yesterday&sort\";\r\n  try {\r\n    const { data } = await axios.get(url);\r\n    // console.log('data',data);\r\n    return data.map((item) => item.country);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n//individual country data\r\nexport const fetchIndividualCountriesData = async () => {\r\n  const url = \"https://corona.lmao.ninja/v2/countries?yesterday&sort\";\r\n  try {\r\n    const { data } = await axios.get(url);\r\n    // console.log('data',data);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { Map, TileLayer, GeoJSON, Marker } from \"react-leaflet\";\nimport mapData from \"./custom.geo.json\";\n\n//color:邊線顏色,dashArray:邊線的虛線類型\nconst countryStyle = {\n  fillColor: \"red\",\n  fillOpacity: 0.3,\n  color: \"white\",\n  dashArray: \"3\",\n};\n\nconst LeafletMap = ({ location, countrySelect }) => {\n  const [clickCountryName, setClickCountryName] = useState(\"\");\n  const [center, setCenter] = useState([37.8, -96]);\n\n  useEffect(() => {\n    function handleCenter() {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        const { latitude, longitude } = position.coords;\n\n        const currentLocation = [latitude, longitude];\n\n        let center = location\n          ? [location.lat, location.long]\n          : currentLocation\n          ? currentLocation\n          : [37.8, -96];\n\n        setCenter(center);\n      });\n    }\n    handleCenter();\n  }, [location]);\n\n \n\n  const mapRef = useRef(null);\n  const onEachCountry = (country, layer, countrySelect) => {\n    const countryName = country.properties.name;\n    // console.log(\"countryName includes?\", countryName.includes(countrySelect));\n\n    layer.bindPopup(countryName); //觸發顯示國家名\n\n    // layer.options.fillColor = \"green\";\n\n    // layer.options.fillColor = countryName.includes(countrySelect)\n    //   ? \"red\"\n    //   : \"green\"; //改背景顏色\n\n    layer.on({\n      click: (event) => {\n        // console.log(\"click\", event.target);\n\n        const map = mapRef.current.leafletElement;\n        // console.log(mapRef);\n        map.fitBounds(event.target.getBounds()); //將click到的地區擺到正中央\n        // console.log(mapRef)\n\n        // setClickCountryName(event.target.feature.properties.name);\n      },\n      mouseleave: (event) => {\n        event.target.resetStyle(); //no effect?\n      },\n    });\n  };\n\n  return (\n    <div className=\"\">\n      {/* <h5 style={{ marginTop: \"25px\" }}>WHERE IS THE COUNTRY?</h5> */}\n      <Map\n        center={center}\n        zoom={3}\n        style={{ width: \"100%\", height: \"600px\"}}\n        ref={mapRef}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <GeoJSON\n          style={countryStyle}\n          data={mapData}\n          onEachFeature={onEachCountry}\n        />\n        <Marker position={center} />\n      </Map>\n    </div>\n  );\n};\n\nexport default LeafletMap;\n","import React, { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport Carousel from \"./components/Carousel/Carousel\";\nimport {\n  fetchData,\n  fetchHistoryData,\n  fetchIndividualCountriesData,\n  fetchCountriesName,\n} from \"./api\";\nimport LeafletMap from \"./components/Map/LeafletMap\";\n\nexport default function App() {\n  const [data, setData] = useState({}); //傳給子元件的資料\n  const [isloading, setIsloading] = useState(true);\n  const [country, setCountry] = useState();\n  const [location, setLocation] = useState(null); //經緯度\n  const [allCountryData, setAllCountryData] = useState(); //存所有國家資料\n  const [globalData, setGlobalData] = useState(); //存全球資料\n  const [historyData, setHistoryData] = useState();\n  const [countryNames, setCountryNames] = useState();\n  async function getGlobalData() {\n    const fetcheddata = await fetchData();\n    const globalHistoryData = await fetchHistoryData(); //歷史資料\n    const individualcountrydata = await fetchIndividualCountriesData(); //individual country data\n    const names = await fetchCountriesName();\n    setGlobalData(fetcheddata);\n    setData(fetcheddata);\n    setHistoryData(globalHistoryData);\n    setAllCountryData(individualcountrydata);\n    setCountryNames(names);\n    setIsloading(false);\n  }\n\n  const handleIfSelectCountry = (country) => {\n    const filteredCountryData = allCountryData.filter(\n      (item) => item.country === country || item.country.includes(country)\n    );\n    setData({\n      confirmed: { value: filteredCountryData[0].cases },\n      recovered: { value: filteredCountryData[0].recovered },\n      deaths: { value: filteredCountryData[0].deaths },\n      lastUpdate: filteredCountryData[0].updated,\n    });\n    setLocation({\n      lat: filteredCountryData[0].countryInfo.lat,\n      long: filteredCountryData[0].countryInfo.long,\n    });\n  };\n  const handleIfSelectGlobal = () => {\n    setData(globalData);\n    setLocation(null);\n  };\n  useEffect(() => {\n    setCountry(\"Global\");\n    getGlobalData();\n  }, []);\n\n  //處理country選擇\n  const handleCountryChange = (country) => {\n    setCountry(country);\n    country === \"Global\"\n      ? handleIfSelectGlobal()\n      : handleIfSelectCountry(country);\n  };\n\n  return (\n    <div className=\"App appCustom\" data-test=\"appCustom\">\n      <div className=\"appBackground\" />\n      <h2 className=\"text-uppercase mb-4 py-4 text-white\">\n        Covid19 live info demo\n      </h2>\n      <h6 className=\"text-white\">\n        The COVID-19 info API is from<span> </span>\n        <a className=\"text-white\" href=\"https://github.com/disease-sh/API\">\n          github.com/NovelCOVID/API\n        </a>\n      </h6>\n      <CountryPicker\n        changeCountry={handleCountryChange}\n        countryNames={countryNames}\n        country={country}\n      />\n\n      <main className=\"row justify-content-center align-items-center\">\n        <div className=\"col-12 col-md-4 col-lg-3\">\n          <Cards data={data} country={country} />\n        </div>\n        <div className=\"col-10 col-md-8 col-lg-7\">\n          <Carousel>\n            <LeafletMap countrySelect={country} location={location} />\n\n            <Chart data={data} country={country} historyData={historyData} />\n          </Carousel>\n        </div>\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bk\":\"Cards_bk__3EfmG\",\"cardContainer\":\"Cards_cardContainer__3SvqF\",\"infoCard\":\"Cards_infoCard__1kp45\",\"digit\":\"Cards_digit__2LCyD\"};"],"sourceRoot":""}