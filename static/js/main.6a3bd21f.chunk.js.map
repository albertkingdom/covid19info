{"version":3,"sources":["components/Cards/Cards.module.scss","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/Map/World.js","components/Map/LeafletMap.js","App.js","index.js"],"names":["module","exports","bk","cardContainer","Cards","props","date","Date","data","lastUpdate","react_default","a","createElement","Container","className","styles","Row","Col","md","Card","Header","country","Body","Text","build_default","start","end","confirmed","value","separator","Footer","toLocaleString","recovered","deaths","url","fetchData","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","url_real","_yield$axios$get","modifiedData","wrap","_context","prev","next","concat","axios","get","sent","console","log","abrupt","t0","stop","_x","apply","this","arguments","fetchDailyData","_ref2","_callee2","_yield$axios$get2","_context2","map","daily","total","reportDate","fetchcountries","_ref3","_callee3","_yield$axios$get3","countries","_context3","name","Chart","_useState","useState","_useState2","slicedToArray","dailydata","setDailyData","useEffect","t1","dailyrate","linechart","length","es","labels","item","datasets","label","borderColor","fill","pointBackgroundColor","backgroundColor","barChart","options","legend","display","CountryPicker","changeCountry","fetchCountries","setFetchCountries","fetchAPI","Fragment","FormControl","style","margin","InputLabel","htmlFor","NativeSelect","onChange","e","target","replace","index","key","WorldMap","countryStyle","fillColor","fillOpacity","color","dashArray","LeafletMap","location","countrySelect","setClickCountryName","center","lat","long","mapRef","useRef","Map","zoom","width","height","ref","TileLayer","attribution","GeoJSON","mapData","onEachFeature","layer","countryName","properties","includes","bindPopup","on","click","event","current","leafletElement","fitBounds","getBounds","feature","mouseleave","resetStyle","Marker","position","App","setData","_useState3","_useState4","isloading","setIsloading","_useState5","_useState6","setCountry","_useState7","_useState8","setLocation","_useState9","_useState10","allCountryData","setAllCountryData","_useState11","_useState12","globalData","setGlobalData","_getGlobalData","fetcheddata","getGlobalData","fetch","then","res","json","href","Cards_Cards","CountryPicker_CountryPicker","filteredCountryData","filter","cases","updated","countryInfo","handleIfSelectCountry","Chart_Chart","Map_LeafletMap","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6a3bd21f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bk\":\"Cards_bk__3EfmG\",\"cardContainer\":\"Cards_cardContainer__3SvqF\"};","import React from \"react\";\r\n// import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.scss\";\r\n// import \"./Cards.scss\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport CountUp from \"react-countup\";\r\nconst Cards = (props) => {\r\n  // console.log(\"cards props\", props);\r\n\r\n  const date = new Date(props.data.lastUpdate);\r\n  const display = (\r\n    <Container className={styles.cardContainer}>\r\n      <Row>\r\n        {/* <div className={styles.bk}>{data.confirmed.value}</div> */}\r\n        {/* {data.map((item,index)=>item.value)} */}\r\n        {/* <div className={styles.bk}>{recovered.value}</div> */}\r\n        <Col md={4}>\r\n          <Card className=\"text-center my-2\">\r\n            <Card.Header>\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              確診人數\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.confirmed.value}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"text-muted\">\r\n              更新時間:{date.toLocaleString()}\r\n            </Card.Footer>\r\n          </Card>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className=\"text-center my-2\">\r\n            <Card.Header>\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              復原人數\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.recovered.value}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"text-muted\">\r\n              更新時間:{date.toLocaleString()}\r\n            </Card.Footer>\r\n          </Card>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className=\"text-center my-2\">\r\n            <Card.Header>\r\n              {props.country && props.country !== \"Global\"\r\n                ? props.country\r\n                : \"全球\"}\r\n              死亡人數\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <CountUp\r\n                  start={0}\r\n                  end={props.data.deaths.value}\r\n                  separator=\",\"\r\n                />\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"text-muted\">\r\n              更新時間:{date.toLocaleString()}\r\n            </Card.Footer>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n  return display;\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  try {\r\n    // const response = await axios.get(url);\r\n    let url_real = url; //如果有選country則改變url\r\n    // console.log(\"fetchdata country\", country);\r\n\r\n    if (country && country !== \"Global\") {\r\n      url_real = `${url}/countries/${country}`;\r\n    }\r\n    const { data } = await axios.get(url_real);\r\n    // const data = response.json();\r\n\r\n    const modifiedData = {\r\n      confirmed: data.confirmed,\r\n      recovered: data.recovered,\r\n      deaths: data.deaths,\r\n      lastUpdate: data.lastUpdate,\r\n    };\r\n    console.log(\"fetchData\", modifiedData);\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    // const response = await axios.get(url);\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    // console.log(\"data_daily\", data);\r\n\r\n    const modifiedData = data.map((daily) => ({\r\n      confirmed: daily.confirmed.total,\r\n      deaths: daily.deaths.total,\r\n      recovered: daily.recovered.total,\r\n      date: daily.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchcountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    // console.log(countries);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailydata, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const dailyrate = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    // console.log(dailydata);\r\n    dailyrate();\r\n  }, []);\r\n\r\n  const linechart =\r\n    dailydata.length !== 0 ? (\r\n      <Line\r\n        data={{\r\n          labels: dailydata.map((item) => item.date),\r\n          datasets: [\r\n            {\r\n              data: dailydata.map((item) => item.confirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"grey\",\r\n              fill: true,\r\n              pointBackgroundColor: \"grey\",\r\n            },\r\n            {\r\n              data: dailydata.map((item) => item.deaths),\r\n              label: \"death\",\r\n              borderColor: \"red\",\r\n              fill: true,\r\n              pointBackgroundColor: \"red\",\r\n              backgroundColor: \"#fc7272\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        // title: { display: true, text: `Current state in ${country}` }\r\n      }}\r\n    />\r\n  ) : null;\r\n  return <Container>{country !== \"Global\" ? barChart : linechart}</Container>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl, InputLabel } from \"@material-ui/core\";\r\nimport { fetchcountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ changeCountry }) => {\r\n  // console.log(changeCountry);\r\n  const [fetchCountries, setFetchCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchCountries(await fetchcountries());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <FormControl style={{ margin: \"250px 0 10px\" }}>\r\n        <InputLabel htmlFor=\"my-input\">Select the country</InputLabel>\r\n        <NativeSelect\r\n          onChange={(e) => {\r\n            changeCountry(e.target.value.replace(\"*\", \"\"));\r\n            // console.log(\"country selected is\", e.target.value);\r\n          }}\r\n        >\r\n          <>\r\n            {fetchCountries.map((country, index) => (\r\n              <option key={index} value={country}>\r\n                {country}\r\n              </option>\r\n            ))}\r\n            <option>Global</option>\r\n          </>\r\n        </NativeSelect>\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { geoMercator, geoPath, geoGraticule10, geoEqualEarth } from \"d3-geo\";\nimport $ from \"jquery\";\n\nfunction WorldMap({ country }) {\n  const [worlddata, setWorlddata] = useState([]);\n  const [lastcountry, setLastCountry] = useState({ name: \"123\", color: \"123\" });\n\n  console.log(\"map country\", country);\n  const projection = geoEqualEarth()\n    .scale(160)\n    .translate([800 / 2, 450 / 2]);\n  useEffect(() => {\n    fetch(\"map/ne_110m_admin_0_countries_geojson.json\")\n      // fetch(\"./map/test.json\")\n      .then(res => res.json())\n      .then(data => {\n        // console.log(\"world\", data);\n        setWorlddata(data.features);\n        // draw(data);\n      });\n    const map = d3\n      .select(\"#map\")\n      .attr(\"width\", 500)\n      .attr(\"height\", 500);\n    function draw(mapData) {\n      // 設定投影中心點與縮放倍率\n      const projection = d3.geoMercator().translate([1000 / 2, 1000 / 2]);\n\n      // 將投影資料轉換為路徑\n      const path = d3.geoPath().projection(projection);\n\n      // 繪製地圖\n      map\n        .selectAll(\"path\")\n        .data(mapData.objects.ne_110m_land.geometries)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", path)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"0.7\")\n        .attr(\"fill\", \"steelblue\")\n        .on(\"mouseover\", function() {\n          d3.select(this).attr(\"fill\", \"#007bff\");\n        })\n        // 滑鼠碰到後改變顏色\n        .on(\"mouseleave\", function() {\n          d3.select(this).attr(\"fill\", \"steelblue\");\n        });\n      // 滑鼠離開將顏色變回\n    }\n  }, []);\n  //ADD function to svg\n  // const handleCountryEnter = index => {\n  //   // console.log('hover on',worlddata[index].properties.NAME);\n  //   $(\"#countryname\").text(\"目前國家: \" + worlddata[index].properties.NAME);\n  //   // $('path').attr('fill','red')\n  // };\n  let lastpath; //save last target\n  let lastpathcolor; //save last target color\n  const handleClick = e => {\n    // console.log(e.target);\n    $(lastpath).attr(\"fill\", lastpathcolor);\n    lastpathcolor = $(e.target).attr(\"fill\");\n    lastpath = e.target;\n    console.log(\"lastpath\", lastpath);\n    console.log(\"lastpathcolor\", lastpathcolor);\n    // $('g.countries').find('path').attr('fill','red')\n    // $(\"path[fill='red']\").attr('fill',lastpathcolor)\n\n    $(e.target).attr(\"fill\", \"red\");\n  };\n  useEffect(() => {\n    console.log(\"props\", country);\n    //將上一個選擇的country設定回預設\n    console.log(\"lastcountry prop\", lastcountry.name);\n    $(`path[data-countryname=${lastcountry.name}]`).attr(\n      \"fill\",\n      lastcountry.color\n    );\n    let lastcountryproperty = {\n      name: country,\n      color: $(`path[data-countryname=${country}]`).attr(\"fill\")\n    };\n    setLastCountry(lastcountryproperty);\n    // console.log('last country',lastcountryselect)\n    $(`path[data-countryname=${country}]`).attr(\"fill\", \"blue\");\n  }, [country]);\n  return (\n    <>\n      <h5 className=\"my-3\" id=\"countryname\">\n        {/* 目前國家: */}\n      </h5>\n      <p style={{ color: \"blue\" }}>選取不同國家在地圖上會變藍色</p>\n      <div id=\"map\">\n        <svg\n          style={{ border: \"1px solid gray\" }}\n          width=\"1000\"\n          height=\"550\"\n          viewBox=\"0 0 800 450\"\n        >\n          <g className=\"countries\">\n            {worlddata.map((d, i) => (\n              <path\n                key={`path-${i}`}\n                d={geoPath().projection(projection)(d)}\n                className=\"country\"\n                fill={`rgba(38,50,56,${(1 / worlddata.length) * i})`}\n                stroke=\"#FFFFFF\"\n                strokeWidth={0.5}\n                // onMouseEnter={() => handleCountryEnter(i)}\n                // onClick={e => handleClick(e)}\n                data-countryname={d.properties.NAME}\n              />\n            ))}\n          </g>\n        </svg>\n      </div>\n    </>\n  );\n}\n\nexport default WorldMap;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { Map, TileLayer, GeoJSON, Marker } from \"react-leaflet\";\nimport mapData from \"./custom.geo.json\";\n\n//color:邊線顏色,dashArray:邊線的虛線類型\nconst countryStyle = {\n  fillColor: \"red\",\n  fillOpacity: 0.3,\n  color: \"white\",\n  dashArray: \"3\",\n};\n\nconst LeafletMap = ({ location, countrySelect }) => {\n  const [clickCountryName, setClickCountryName] = useState(\"\");\n  //   let center = [37.8, -96];\n  let center = location ? [location.lat, location.long] : [37.8, -96]; //設置地圖中心點座標\n\n  const mapRef = useRef(null);\n  const onEachCountry = (country, layer, countrySelect) => {\n    const countryName = country.properties.name;\n    console.log(\"countryName includes?\", countryName.includes(countrySelect));\n\n    layer.bindPopup(countryName); //觸發顯示國家名\n\n    // layer.options.fillColor = \"green\";\n\n    // layer.options.fillColor = countryName.includes(countrySelect)\n    //   ? \"red\"\n    //   : \"green\"; //改背景顏色\n\n    layer.on({\n      click: (event) => {\n        console.log(\"click\", event.target);\n\n        const map = mapRef.current.leafletElement;\n        // console.log(mapRef);\n        map.fitBounds(event.target.getBounds()); //將click到的地區擺到正中央\n\n        setClickCountryName(event.target.feature.properties.name);\n      },\n      mouseleave: (event) => {\n        event.target.resetStyle(); //no effect?\n      },\n    });\n  };\n\n  return (\n    <>\n      <Map\n        center={center}\n        zoom={3}\n        style={{ width: \"50vw\", height: \"500px\", margin: \"50px auto\" }}\n        ref={mapRef}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <GeoJSON\n          style={countryStyle}\n          data={mapData}\n          onEachFeature={onEachCountry}\n        />\n        <Marker position={center} />\n      </Map>\n    </>\n  );\n};\n\nexport default LeafletMap;\n","import React, { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport { fetchData } from \"./api\";\nimport LeafletMap from \"./components/Map/LeafletMap\";\nexport default function App() {\n  const [data, setData] = useState({}); //傳給子元件的資料\n  const [isloading, setIsloading] = useState(true);\n  const [country, setCountry] = useState();\n  const [location, setLocation] = useState(null); //經緯度\n  const [allCountryData, setAllCountryData] = useState(); //存所有國家資料\n  const [globalData, setGlobalData] = useState(); //存全球資料\n  async function getGlobalData() {\n    const fetcheddata = await fetchData();\n\n    setGlobalData(fetcheddata);\n    setData(fetcheddata);\n    setIsloading(false);\n  }\n  const fetchAllCountryData = () => {\n    //所有國家資料\n    let url = \"https://corona.lmao.ninja/v2/countries?yesterday=false&sort\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        // console.log(\"all country\", data);\n\n        setAllCountryData(data);\n      });\n  };\n  const handleIfSelectCountry = (country) => {\n    const filteredCountryData = allCountryData.filter(\n      (item) => item.country === country || item.country.includes(country)\n    );\n    setData({\n      confirmed: { value: filteredCountryData[0].cases },\n      recovered: { value: filteredCountryData[0].recovered },\n      deaths: { value: filteredCountryData[0].deaths },\n      lastUpdate: filteredCountryData[0].updated,\n    });\n    setLocation({\n      lat: filteredCountryData[0].countryInfo.lat,\n      long: filteredCountryData[0].countryInfo.long,\n    });\n  };\n  const handleIfSelectGlobal = () => {\n    setData(globalData);\n    setLocation(null);\n  };\n  useEffect(() => {\n    setCountry(\"Global\");\n    getGlobalData();\n    fetchAllCountryData();\n  }, []);\n\n  //處理country選擇\n  const handleCountryChange = (country) => {\n    setCountry(country);\n    country === \"Global\"\n      ? handleIfSelectGlobal()\n      : handleIfSelectCountry(country);\n  };\n  return (\n    <div className=\"App appCustom\">\n      <h2 className=\"text-uppercase my-4 text-white\">Covid19 live info demo</h2>\n      <h6 className=\"text-white\">\n        The COVID-19 API is from<span> </span>\n        <a className=\"text-white\" href=\"https://covid19.mathdro.id/api\">\n          https://covid19.mathdro.id/api\n        </a>\n      </h6>\n      {isloading ? (\n        <div>Loading...</div>\n      ) : (\n        <Cards data={data} country={country} />\n      )}\n      <CountryPicker changeCountry={handleCountryChange} />\n      <Chart data={data} country={country} />\n      {/* <World country={country} /> */}\n\n      <LeafletMap countrySelect={country} location={location} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}